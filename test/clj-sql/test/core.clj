(ns clj-sql.test.core
  "Tests for clj-sql as a whole"
  (:use clojure.test)
  (:import [org.h2.jdbcx JdbcConnectionPool])
  (:require [clj-sql.core :as sql]))

;;======== In memory H2 database ===============================================
(def *db*
     {:datasource (JdbcConnectionPool/create 
                   "jdbc:h2:mem:test",
                   "sa","")})

;;======== Helper functions that can be run from the repl ======================

(defn do-commands
  "Runs the given sql"
  [s]
  (sql/with-connection *db*
    (sql/do-commands s)))

(defn select
  "Runs an sql select and returns the results"
  [s]
  (sql/with-connection *db*
    (sql/with-query-results res [s]
      (doall res))))

(defn create-table
  "Creates the test table"
  []
  ;; c.c.sql/create-table doesn't work with H2
  (do-commands
     "create table test
    (
      id bigint generated by default as identity,
      \"my-txt\" varchar(20)
    );"))

(defn drop-table
  "Drops the test table"
  []
  (sql/with-connection *db*
    (sql/drop-table :test)))

(defn reset
  "Drops the test table without error"
  []
  (try
    (drop-table)
    (catch Exception _)))

;;======== Unittests ===========================================================

(defn run-test
  "Runs a unittest function f"
  [f]
  (reset)
  (create-table)
  (sql/with-connection *db* (f)))

(use-fixtures :each run-test)

(deftest create
  ;; An exception will be thrown if no table exists
  (is (nil? (select "select * from test"))))

(deftest insert
  (sql/insert-values :test [:my-txt] ["xxx"])
  (is (= (select "select * from test")
         [{:id 1 :my-txt "xxx"}])))

